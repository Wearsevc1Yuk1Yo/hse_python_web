from main_structures.main import users_db, posts_db
from datetime import datetime

def make_html_page(title: str, content: str):
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>{title}</title>
        <meta charset="UTF-8">
        <style>
            body {{ font-family: Arial; margin: 40px; }}
            .post {{ border: 1px solid #ccc; padding: 15px; margin: 10px 0; }}
            .nav {{ margin: 20px 0; }}
            form {{ max-width: 600px; }}
            input, textarea, select {{ width: 100%; padding: 8px; margin: 5px 0; }}
            button {{ background: #4CAF50; color: white; padding: 10px; border: none; cursor: pointer; }}
        </style>
    </head>
    <body>
        <h1>{title}</h1>
        {content}
    </body>
    </html>
    """

def get_author_name(author_id: int):  # –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é
    if author_id in users_db:
        return users_db[author_id].login
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"

def mainpage():
    try:
        if not posts_db:
            posts_html = "<p>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤. <a href='/create-post'>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!</a></p>"
        else:
            posts_html = ""
            posts_list = list(posts_db.values())
            posts_list.sort(key=lambda x: x.id, reverse=True)
            
            for post in posts_list:
                author = get_author_name(post.authorId)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                content_preview = post.content[:100] + "..." if len(post.content) > 100 else post.content
                posts_html += f"""
                <div class="post">
                    <h3><a href="/post/{post.id}">{post.title}</a></h3>
                    <p><strong>–ê–≤—Ç–æ—Ä:</strong> {author}</p>
                    <p><strong>–î–∞—Ç–∞:</strong> {post.createdAt}</p>
                    <p>{content_preview}</p>
                    <a href="/post/{post.id}">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a> | 
                    <a href="/edit-post/{post.id}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a>
                </div>
                """
        
        nav_links = """
        <div class="nav">
            <a href="/create-post">üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</a> | 
            <a href="/create-user">üë• –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> |
            <a href="/api/users">üìä API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</a> |
            <a href="/api/posts">üìÑ API –ø–æ—Å—Ç–æ–≤</a>
        </div>
        """
        
        return make_html_page("–ú–æ–π –ë–ª–æ–≥", nav_links + posts_html)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}"


def viewed_post(post_id: int):
    try:
        if post_id not in posts_db:
            return "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        post = posts_db[post_id]
        author = get_author_name(post.authorId)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        
        content = f"""
        <div class="post">
            <h2>{post.title}</h2>
            <p><strong>–ê–≤—Ç–æ—Ä:</strong> {author}</p>
            <p><strong>–°–æ–∑–¥–∞–Ω:</strong> {post.createdAt}</p>
            <p><strong>–û–±–Ω–æ–≤–ª–µ–Ω:</strong> {post.updatedAt}</p>
            <div style="white-space: pre-line; margin: 20px 0;">{post.content}</div>
        </div>
        <div class="nav">
            <a href="/">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a> | 
            <a href="/edit-post/{post_id}">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a> |
            <a href="/delete-post/{post_id}" onclick="return confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</a>
        </div>
        """
        
        return make_html_page(post.title, content)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å—Ç–∞: {str(e)}"

def create_post():

    try:
        if not users_db:
            user_options = "<option value=''>–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</option>"
        else:
            user_options = ""
            for user_id, user in users_db.items():
                user_options += f"<option value='{user_id}'>{user.login} ({user.email})</option>"
        
        form_html = f"""
        <form method="post" action="/create-post">
            <div>
                <label>–ê–≤—Ç–æ—Ä:</label>
                <select name="authorId" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞</option>
                    {user_options}
                </select>
            </div>
            <div>
                <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                <input type="text" name="title" required>
            </div>
            <div>
                <label>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
                <textarea name="content" rows="10" required></textarea>
            </div>
            <button type="submit">–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</button>
        </form>
        <div class="nav">
            <a href="/">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </div>
        """
        
        return make_html_page("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", form_html)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {str(e)}"


def edit_post(post_id: int):
    try:
        if post_id not in posts_db:
            return "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        post = posts_db[post_id]
        
        form_html = f"""
        <form method="post" action="/edit-post/{post_id}">
            <div>
                <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                <input type="text" name="title" value="{post.title}" required>
            </div>
            <div>
                <label>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
                <textarea name="content" rows="10" required>{post.content}</textarea>
            </div>
            <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
        </form>
        <div class="nav">
            <a href="/post/{post_id}">‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É</a> | 
            <a href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </div>
        """
        
        return make_html_page("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", form_html)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {str(e)}"

def create_user():

    try:
        form_html = """
        <form method="post" action="/create-user">
            <div>
                <label>Email:</label>
                <input type="email" name="email" required>
            </div>
            <div>
                <label>–õ–æ–≥–∏–Ω:</label>
                <input type="text" name="login" required>
            </div>
            <div>
                <label>–ü–∞—Ä–æ–ª—å:</label>
                <input type="password" name="password" required>
            </div>
            <button type="submit">–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
        </form>
        <div class="nav">
            <a href="/">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </div>
        """
        
        return make_html_page("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", form_html)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {str(e)}"
